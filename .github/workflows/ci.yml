name: Build C++ Module

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_DIR: ${{ github.workspace }}/cpp/build
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Show Python info (debug)
        run: |
          python -V
          python -c "import sys; print('prefix=', sys.prefix)"
          pip --version

      - name: Install system packages (build-essential, ninja, pkg-config)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build pkg-config

      - name: Install pip requirements (if requirements.txt exists)
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          else
            echo "No requirements.txt found — skipping pip install"
          fi

      - name: Install vcpkg dependencies (reads vcpkg.json)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ github.workspace }}/vcpkg
          vcpkgJsonGlob: 'vcpkg.json'
          # optional: you can set the triplet if needed, e.g. x64-linux
          # triplet: 'x64-linux'

      - name: List repo (debug)
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          ls -la
          echo "cpp directory:"
          ls -la cpp || true
          echo "vcpkg dir top:"
          ls -la ${{ github.workspace }}/vcpkg || true

      - name: Configure CMake
        run: |
          mkdir -p "${BUILD_DIR}"
          cmake -S cpp -B "${BUILD_DIR}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build project with CMake (Release)
        run: cmake --build "${BUILD_DIR}" --config Release -- -j$(nproc)

      - name: Generate pyi stubs (if script exists)
        run: |
          if [ -x "./generate_stubs.sh" ]; then
            export BUILD_DIR=${BUILD_DIR}
            export STUB_OUT=${{ github.workspace }}/cpp/stubs
            mkdir -p "$STUB_OUT"
            bash ./generate_stubs.sh
          else
            echo "No generate_stubs.sh executable found at repo root — skipping stubs generation"
          fi

      - name: List build outputs (debug)
        run: |
          echo "Contents of build dir:"
          ls -la "${BUILD_DIR}" || true
          echo "Contents of cpp:"
          ls -la cpp || true

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: cpp-build
          path: |
            ${{ github.workspace }}/cpp/build
            ${{ github.workspace }}/cpp/stubs
