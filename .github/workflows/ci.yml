name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VCPKG_ROOT: ${{ runner.temp }}/vcpkg
      BUILD_DIR: cpp/build
      STUB_OUT: cpp/stubs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system packages (build tools, OpenBLAS)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential cmake ninja-build pkg-config libopenblas-dev

      - name: Install Python deps (pip)
        run: python -m pip install --upgrade pip setuptools wheel
      - name: Install Python test deps
        run: |
          python -m pip install -r requirements.txt
          python -m pip install pytest pybind11-stubgen || true

      - name: Bootstrap vcpkg (clone & build)
        run: |
          git clone --depth=1 https://github.com/microsoft/vcpkg.git "${VCPKG_ROOT}"
          "${VCPKG_ROOT}/bootstrap-vcpkg.sh"

      - name: Cache vcpkg installed folder
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VCPKG_ROOT }}/installed
            ${{ env.VCPKG_ROOT }}/packages
            ${{ env.VCPKG_ROOT }}/buildtrees
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Install vcpkg dependencies (manifest mode)
        working-directory: ${{ github.workspace }}
        run: |
          # install libs specified in vcpkg.json for x64-linux
          "${VCPKG_ROOT}/vcpkg" install --triplet x64-linux --manifest

      - name: Configure with CMake
        working-directory: ${{ github.workspace }}
        run: |
          cmake -S cpp -B ${BUILD_DIR} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake \
            -G "Ninja"

      - name: Build
        run: cmake --build ${BUILD_DIR} --parallel

      - name: Install python package
        run: python -m pip install .

      - name: Generate stubs (if .env exists)
        run: |
          if [ -f ".env" ]; then
            chmod +x generate_stubs.sh
            export BUILD_DIR=${BUILD_DIR}
            export STUB_OUT=${STUB_OUT}
            ./generate_stubs.sh
          else
            echo ".env not found â€” skipping stub generation"
          fi

      - name: Run tests
        run: pytest -q || true

      - name: Upload build artifacts (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            ${BUILD_DIR}
            cpp/*.so
