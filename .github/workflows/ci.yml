name: CI - Build + Test (Ubuntu + vcpkg)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git curl cmake python3-dev python3-pip python3-venv
          python -m pip install --upgrade pip

      - name: Setup and run vcpkg
        uses: microsoft/vcpkg-action@v5
        with:
          # action will clone & bootstrap vcpkg under $GITHUB_WORKSPACE/vcpkg
          vcpkgDirectory: ${{ github.workspace }}
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Configure & build (CMake using vcpkg)
        run: |
          set -e
          mkdir -p cpp/build
          cd cpp/build

          # Python + NumPy info for CMake
          PY_BIN=$(which python)
          NUMPY_INCLUDE=$(python -c "import numpy as np; print(np.get_include())")

          echo "Python executable: $PY_BIN"
          echo "NumPy include: $NUMPY_INCLUDE"

          # Point CMake at the vcpkg toolchain that the action bootstrapped.
          # The vcpkg repo is put at $GITHUB_WORKSPACE/vcpkg by the action above.
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=x64-linux \
            -DPython3_EXECUTABLE="$PY_BIN" \
            -DNUMPY_INCLUDE_DIR="$NUMPY_INCLUDE"

          cmake --build . --config Release -- -j2

      - name: Smoke test - import built module
        run: |
          # Add the build directory to the Python path
          python -c "import sys; sys.path.append('cpp/build'); import mlcore_cpp; print('âœ… Import successful!')"
